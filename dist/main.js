(()=>{"use strict";var r={430:(r,e,n)=>{n.d(e,{A:()=>s});var t=n(354),a=n.n(t),o=n(314),i=n.n(o)()(a());i.push([r.id,"html, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video, button {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}","",{version:3,sources:["webpack://./src/reset.css"],names:[],mappings:"AAAA;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA,gDAAgD;AAChD;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB",sourcesContent:["html, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed, \r\nfigure, figcaption, footer, header, hgroup, \r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video, button {\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 100%;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure, \r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\nbody {\r\n\tline-height: 1;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}"],sourceRoot:""}]);const s=i},365:(r,e,n)=>{n.d(e,{A:()=>s});var t=n(354),a=n.n(t),o=n(314),i=n.n(o)()(a());i.push([r.id,"@import url(https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;700&display=swap);"]),i.push([r.id,":root {\n  --primary-color: #1a1a2e;\n  --secondary-color: #16213e;\n  --accent-color: #0f3460;\n  --text-color: #e94560;\n  --light-color: #f1f1f1;\n  --ship-color: #4ecca3;\n  --water-color: #2c7da0;\n  --hit-color: #e63946;\n}\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-family: 'Orbitron', sans-serif;\n  background-color: var(--primary-color);\n  color: var(--light-color);\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 2rem;\n}\n\n.header {\n  font-size: calc(2rem + 2vw);\n  text-align: center;\n  margin-bottom: 2rem;\n  text-transform: uppercase;\n  letter-spacing: 0.2em;\n  color: var(--text-color);\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);\n}\n\n.game-container {\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  flex-wrap: wrap;\n  gap: 4rem;\n}\n\n.player-container,\n.computer-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.player-container > h4,\n.computer-container > h4 {\n  font-size: 1.5rem;\n  margin-bottom: 1rem;\n  text-transform: uppercase;\n  letter-spacing: 0.1em;\n}\n\n.board {\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n  width: clamp(300px, 30vw, 500px);\n  height: clamp(300px, 30vw, 500px);\n  border: 2px solid var(--accent-color);\n  background-color: var(--secondary-color);\n  box-shadow: 0 0 20px rgba(15, 52, 96, 0.5);\n  border-radius: 10px;\n  overflow: hidden;\n}\n\n.cell {\n  border: 1px solid rgba(255, 255, 255, 0.1);\n  transition: all 0.3s ease;\n}\n\n.computer .cell:hover {\n  background-color: rgba(255, 255, 255, 0.1);\n  cursor: crosshair;\n}\n\n.computer .cell.hit:hover {\n  cursor: not-allowed;\n}\n\n.player .cell.ship {\n  background-color: var(--ship-color);\n}\n\n.player .cell.movable {\n  cursor: move;\n}\n\n.cell.water.hit {\n  background-color: var(--water-color);\n}\n\n.cell.ship.hit {\n  background-color: var(--hit-color);\n}\n\n.cell.ship.hit.sunk {\n  background-color: var(--text-color);\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n.restart-game-container,\n.start-game-container {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.8);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 2rem;\n  animation: fadeIn 0.5s;\n}\n\n.restart-game-container h2 {\n  font-size: 3rem;\n  text-align: center;\n  color: var(--text-color);\n}\n\n.restart-game-container button,\n.start-game-container button {\n  padding: 1rem 2rem;\n  font-size: 1.2rem;\n  font-family: 'Orbitron', sans-serif;\n  text-transform: uppercase;\n  letter-spacing: 0.1em;\n  background-color: var(--accent-color);\n  color: var(--light-color);\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.restart-game-container button:hover,\n.start-game-container button:hover {\n  background-color: var(--text-color);\n  transform: scale(1.05);\n}\n\n.valid-move {\n  background-color: rgba(78, 204, 163, 0.3);\n}\n\n.invalid-move {\n  background-color: rgba(233, 69, 96, 0.3);\n}\n\n@media (max-width: 768px) {\n  .game-container {\n    flex-direction: column;\n    gap: 2rem;\n  }\n\n  .board {\n    width: 90vw;\n    height: 90vw;\n  }\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAEA;EACE,wBAAwB;EACxB,0BAA0B;EAC1B,uBAAuB;EACvB,qBAAqB;EACrB,sBAAsB;EACtB,qBAAqB;EACrB,sBAAsB;EACtB,oBAAoB;AACtB;;AAEA;EACE,sBAAsB;EACtB,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,mCAAmC;EACnC,sCAAsC;EACtC,yBAAyB;EACzB,iBAAiB;EACjB,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,aAAa;AACf;;AAEA;EACE,2BAA2B;EAC3B,kBAAkB;EAClB,mBAAmB;EACnB,yBAAyB;EACzB,qBAAqB;EACrB,wBAAwB;EACxB,2CAA2C;AAC7C;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,uBAAuB;EACvB,eAAe;EACf,SAAS;AACX;;AAEA;;EAEE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;AACrB;;AAEA;;EAEE,iBAAiB;EACjB,mBAAmB;EACnB,yBAAyB;EACzB,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,sCAAsC;EACtC,mCAAmC;EACnC,gCAAgC;EAChC,iCAAiC;EACjC,qCAAqC;EACrC,wCAAwC;EACxC,0CAA0C;EAC1C,mBAAmB;EACnB,gBAAgB;AAClB;;AAEA;EACE,0CAA0C;EAC1C,yBAAyB;AAC3B;;AAEA;EACE,0CAA0C;EAC1C,iBAAiB;AACnB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,mCAAmC;AACrC;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,kCAAkC;AACpC;;AAEA;EACE,mCAAmC;AACrC;;AAEA;EACE,OAAO,UAAU,EAAE;EACnB,KAAK,UAAU,EAAE;AACnB;;AAEA;;EAEE,eAAe;EACf,MAAM;EACN,OAAO;EACP,WAAW;EACX,YAAY;EACZ,oCAAoC;EACpC,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,SAAS;EACT,sBAAsB;AACxB;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,wBAAwB;AAC1B;;AAEA;;EAEE,kBAAkB;EAClB,iBAAiB;EACjB,mCAAmC;EACnC,yBAAyB;EACzB,qBAAqB;EACrB,qCAAqC;EACrC,yBAAyB;EACzB,YAAY;EACZ,kBAAkB;EAClB,eAAe;EACf,yBAAyB;AAC3B;;AAEA;;EAEE,mCAAmC;EACnC,sBAAsB;AACxB;;AAEA;EACE,yCAAyC;AAC3C;;AAEA;EACE,wCAAwC;AAC1C;;AAEA;EACE;IACE,sBAAsB;IACtB,SAAS;EACX;;EAEA;IACE,WAAW;IACX,YAAY;EACd;AACF",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;700&display=swap');\r\n\r\n:root {\r\n  --primary-color: #1a1a2e;\r\n  --secondary-color: #16213e;\r\n  --accent-color: #0f3460;\r\n  --text-color: #e94560;\r\n  --light-color: #f1f1f1;\r\n  --ship-color: #4ecca3;\r\n  --water-color: #2c7da0;\r\n  --hit-color: #e63946;\r\n}\r\n\r\n* {\r\n  box-sizing: border-box;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\nbody {\r\n  font-family: 'Orbitron', sans-serif;\r\n  background-color: var(--primary-color);\r\n  color: var(--light-color);\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 2rem;\r\n}\r\n\r\n.header {\r\n  font-size: calc(2rem + 2vw);\r\n  text-align: center;\r\n  margin-bottom: 2rem;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.2em;\r\n  color: var(--text-color);\r\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);\r\n}\r\n\r\n.game-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: flex-start;\r\n  flex-wrap: wrap;\r\n  gap: 4rem;\r\n}\r\n\r\n.player-container,\r\n.computer-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n}\r\n\r\n.player-container > h4,\r\n.computer-container > h4 {\r\n  font-size: 1.5rem;\r\n  margin-bottom: 1rem;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.1em;\r\n}\r\n\r\n.board {\r\n  display: grid;\r\n  grid-template-columns: repeat(10, 1fr);\r\n  grid-template-rows: repeat(10, 1fr);\r\n  width: clamp(300px, 30vw, 500px);\r\n  height: clamp(300px, 30vw, 500px);\r\n  border: 2px solid var(--accent-color);\r\n  background-color: var(--secondary-color);\r\n  box-shadow: 0 0 20px rgba(15, 52, 96, 0.5);\r\n  border-radius: 10px;\r\n  overflow: hidden;\r\n}\r\n\r\n.cell {\r\n  border: 1px solid rgba(255, 255, 255, 0.1);\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.computer .cell:hover {\r\n  background-color: rgba(255, 255, 255, 0.1);\r\n  cursor: crosshair;\r\n}\r\n\r\n.computer .cell.hit:hover {\r\n  cursor: not-allowed;\r\n}\r\n\r\n.player .cell.ship {\r\n  background-color: var(--ship-color);\r\n}\r\n\r\n.player .cell.movable {\r\n  cursor: move;\r\n}\r\n\r\n.cell.water.hit {\r\n  background-color: var(--water-color);\r\n}\r\n\r\n.cell.ship.hit {\r\n  background-color: var(--hit-color);\r\n}\r\n\r\n.cell.ship.hit.sunk {\r\n  background-color: var(--text-color);\r\n}\r\n\r\n@keyframes fadeIn {\r\n  from { opacity: 0; }\r\n  to { opacity: 1; }\r\n}\r\n\r\n.restart-game-container,\r\n.start-game-container {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0, 0, 0, 0.8);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 2rem;\r\n  animation: fadeIn 0.5s;\r\n}\r\n\r\n.restart-game-container h2 {\r\n  font-size: 3rem;\r\n  text-align: center;\r\n  color: var(--text-color);\r\n}\r\n\r\n.restart-game-container button,\r\n.start-game-container button {\r\n  padding: 1rem 2rem;\r\n  font-size: 1.2rem;\r\n  font-family: 'Orbitron', sans-serif;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.1em;\r\n  background-color: var(--accent-color);\r\n  color: var(--light-color);\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.restart-game-container button:hover,\r\n.start-game-container button:hover {\r\n  background-color: var(--text-color);\r\n  transform: scale(1.05);\r\n}\r\n\r\n.valid-move {\r\n  background-color: rgba(78, 204, 163, 0.3);\r\n}\r\n\r\n.invalid-move {\r\n  background-color: rgba(233, 69, 96, 0.3);\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .game-container {\r\n    flex-direction: column;\r\n    gap: 2rem;\r\n  }\r\n\r\n  .board {\r\n    width: 90vw;\r\n    height: 90vw;\r\n  }\r\n}"],sourceRoot:""}]);const s=i},314:r=>{r.exports=function(r){var e=[];return e.toString=function(){return this.map((function(e){var n="",t=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),t&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=r(e),t&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(r,n,t,a,o){"string"==typeof r&&(r=[[null,r,void 0]]);var i={};if(t)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var c=0;c<r.length;c++){var d=[].concat(r[c]);t&&i[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),e.push(d))}},e}},354:r=>{r.exports=function(r){var e=r[1],n=r[3];if(!n)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),o="/*# ".concat(a," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},72:r=>{var e=[];function n(r){for(var n=-1,t=0;t<e.length;t++)if(e[t].identifier===r){n=t;break}return n}function t(r,t){for(var o={},i=[],s=0;s<r.length;s++){var l=r[s],c=t.base?l[0]+t.base:l[0],d=o[c]||0,A="".concat(c," ").concat(d);o[c]=d+1;var h=n(A),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==h)e[h].references++,e[h].updater(p);else{var m=a(p,t);t.byIndex=s,e.splice(s,0,{identifier:A,updater:m,references:1})}i.push(A)}return i}function a(r,e){var n=e.domAPI(e);return n.update(r),function(e){if(e){if(e.css===r.css&&e.media===r.media&&e.sourceMap===r.sourceMap&&e.supports===r.supports&&e.layer===r.layer)return;n.update(r=e)}else n.remove()}}r.exports=function(r,a){var o=t(r=r||[],a=a||{});return function(r){r=r||[];for(var i=0;i<o.length;i++){var s=n(o[i]);e[s].references--}for(var l=t(r,a),c=0;c<o.length;c++){var d=n(o[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}o=l}}},659:r=>{var e={};r.exports=function(r,n){var t=function(r){if(void 0===e[r]){var n=document.querySelector(r);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(r){n=null}e[r]=n}return e[r]}(r);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(n)}},540:r=>{r.exports=function(r){var e=document.createElement("style");return r.setAttributes(e,r.attributes),r.insert(e,r.options),e}},56:(r,e,n)=>{r.exports=function(r){var e=n.nc;e&&r.setAttribute("nonce",e)}},825:r=>{r.exports=function(r){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=r.insertStyleElement(r);return{update:function(n){!function(r,e,n){var t="";n.supports&&(t+="@supports (".concat(n.supports,") {")),n.media&&(t+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(t+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),t+=n.css,a&&(t+="}"),n.media&&(t+="}"),n.supports&&(t+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(t,r,e.options)}(e,r,n)},remove:function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(e)}}}},113:r=>{r.exports=function(r,e){if(e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}}},e={};function n(t){var a=e[t];if(void 0!==a)return a.exports;var o=e[t]={id:t,exports:{}};return r[t](o,o.exports,n),o.exports}n.n=r=>{var e=r&&r.__esModule?()=>r.default:()=>r;return n.d(e,{a:e}),e},n.d=(r,e)=>{for(var t in e)n.o(e,t)&&!n.o(r,t)&&Object.defineProperty(r,t,{enumerable:!0,get:e[t]})},n.o=(r,e)=>Object.prototype.hasOwnProperty.call(r,e),n.nc=void 0;var t=n(72),a=n.n(t),o=n(825),i=n.n(o),s=n(659),l=n.n(s),c=n(56),d=n.n(c),A=n(540),h=n.n(A),p=n(113),m=n.n(p),u=n(430),g={};g.styleTagTransform=m(),g.setAttributes=d(),g.insert=l().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=h(),a()(u.A,g),u.A&&u.A.locals&&u.A.locals;var f=n(365),C={};C.styleTagTransform=m(),C.setAttributes=d(),C.insert=l().bind(null,"head"),C.domAPI=i(),C.insertStyleElement=h(),a()(f.A,C),f.A&&f.A.locals&&f.A.locals;const b=class{constructor(r){this.length=r,this.timesHit=0,this.hits=[],this.isSunk=!1,this.direction=null}hit(r=null,e=null){if(this.isSunk)throw new Error("Ship is already sunk");this.timesHit++,this.hits.push({x:r,y:e}),this.determineIfSunk()&&(this.isSunk=!0)}determineIfSunk(){return this.timesHit===this.length}},y=class{constructor(){this.board=this.createBoard(10),this.ships=[],this.missedAttacks=[]}createBoard(r){const e=[];for(let n=0;n<r;n++){e[n]=[];for(let t=0;t<r;t++)e[n][t]={hit:!1,ship:null}}return e}placeShip(r,e,n,t){if(!this.canPlaceShip(r,e,n,t))throw new Error("Ship cannot be placed.");switch(this.ships.push(t),t.direction=n,n){case"horizontal":for(let n=0;n<t.length;n++)this.board[r][e+n].ship=t;break;case"vertical":for(let n=0;n<t.length;n++)this.board[r+n][e].ship=t}}canReceiveAttack(r,e){return!this.board[r][e].hit}receiveAttack(r,e){if(!this.canReceiveAttack(r,e))throw new Error("Spot is already hit");this.board[r][e].hit=!0,this.board[r][e].ship?this.board[r][e].ship.hit(r,e):this.missedAttacks.push({x:r,y:e})}allShipsSunk(){return this.ships.every((r=>r.isSunk))}canPlaceShip(r,e,n,t){if("horizontal"===n){if(this.board.length<e+t.length)return!1;for(let n=0;n<t.length;n++)if(this.board[r][e+n].ship)return!1}else if("vertical"===n){if(this.board.length<r+t.length)return!1;for(let n=0;n<t.length;n++)if(this.board[r+n][e].ship)return!1}if("horizontal"===n){if(this.board[r][e-1]&&this.board[r][e-1].ship||this.board[r][e+t.length]&&this.board[r][e+t.length].ship)return!1;for(let n=-1;n<t.length+1;n++){if(this.board[r-1]&&this.board[r-1][e+n]&&this.board[r-1][e+n].ship)return!1;if(this.board[r+1]&&this.board[r+1][e+n]&&this.board[r+1][e+n].ship)return!1}}else if("vertical"===n){if(this.board[r-1]&&this.board[r-1][e]&&this.board[r-1][e].ship||this.board[r+t.length]&&this.board[r+t.length][e]&&this.board[r+t.length][e].ship)return!1;for(let n=-1;n<t.length+1;n++){if(this.board[r+n]&&this.board[r+n][e-1]&&this.board[r+n][e-1].ship)return!1;if(this.board[r+n]&&this.board[r+n][e+1]&&this.board[r+n][e+1].ship)return!1}}return!0}placeShipRandomly(){this.board=this.createBoard(10),this.ships=[];const r=new b(2),e=new b(2),n=new b(3),t=new b(4),a=new b(5),o=[];o.push(r,e,n,t,a),o.forEach((r=>{let e;do{e=[Math.floor(10*Math.random()),Math.floor(10*Math.random()),Math.random()<.5?"horizontal":"vertical"]}while(!this.canPlaceShip(...e,r));this.placeShip(...e,r)}))}},B=class{constructor(r){this.type=r,this.gameBoard=new y}};new class{constructor(r,e){this.player=r,this.computer=e,this.draggedShip=null,this.cellClickHandler=this.cellClickHandler.bind(this),this.dropHandler=this.dropHandler.bind(this),this.dragOverHandler=this.dragOverHandler.bind(this),this.dragStartHandler=this.dragStartHandler.bind(this),this.dragEndHandler=this.dragEndHandler.bind(this),this.dragEnterHandler=this.dragEnterHandler.bind(this)}dragStartHandler(r){r.target.classList.add("dragging");const e=this.player.gameBoard.board,n=Number(r.target.dataset.x),t=Number(r.target.dataset.y);this.draggedShip=e[n][t].ship;const a=this.draggedShip;for(let r=0;r<a.length;r++)"horizontal"===a.direction?(document.querySelector(`.cell[data-x="${a.coordinates.x}"][data-y="${a.coordinates.y+r}"]`).classList.remove("ship","movable"),this.player.gameBoard.board[a.coordinates.x][a.coordinates.y+r].ship=null):(document.querySelector(`.cell[data-x="${a.coordinates.x+r}"][data-y="${a.coordinates.y}"]`).classList.remove("ship","movable"),this.player.gameBoard.board[a.coordinates.x+r][a.coordinates.y].ship=null)}dragOverHandler(r){r.preventDefault()}dragEnterHandler(r){const e=document.querySelectorAll(".valid-move, .invalid-move");e&&e.forEach((r=>r.classList.remove("valid-move","invalid-move")));const n=Number(r.target.dataset.x),t=Number(r.target.dataset.y),a=[];if(this.draggedShip){for(let r=0;r<this.draggedShip.length;r++)"horizontal"===this.draggedShip.direction?t+r<10&&a.push(document.querySelector(`.player .cell[data-x="${n}"][data-y="${t+r}"]`)):n+r<10&&a.push(document.querySelector(`.player .cell[data-x="${n+r}"][data-y="${t}"]`));this.player.gameBoard.canPlaceShip(n,t,this.draggedShip.direction,this.draggedShip)?a.forEach((r=>{r.classList.add("valid-move")})):a.forEach((r=>{r.classList.add("invalid-move")}))}}dropHandler(r){r.preventDefault(),document.querySelector(".dragging")&&document.querySelector(".dragging").classList.remove("dragging");const e=document.querySelectorAll(".valid-move, .invalid-move");if(e&&e.forEach((r=>r.classList.remove("valid-move","invalid-move"))),!this.draggedShip)return;const n=new b(this.draggedShip.length);n.direction=this.draggedShip.direction;const t=Number(r.target.dataset.x),a=Number(r.target.dataset.y);this.player.gameBoard.canPlaceShip(t,a,n.direction,n)?(this.player.gameBoard.placeShip(t,a,n.direction,n),this.player.gameBoard.ships=this.player.gameBoard.ships.filter((r=>this.draggedShip!==r))):this.player.gameBoard.placeShip(this.draggedShip.coordinates.x,this.draggedShip.coordinates.y,this.draggedShip.direction,this.draggedShip),this.draggedShip=null,this.displayBoardPlayer()}dragEndHandler(r){if(r.target.classList.contains("dragging")){r.target.classList.remove("dragging");const e=Number(r.target.dataset.x),n=Number(r.target.dataset.y);this.player.gameBoard.ships=this.player.gameBoard.ships.filter((r=>this.draggedShip!==r));const t=new b(this.draggedShip.length);this.player.gameBoard.placeShip(e,n,this.draggedShip.direction,t),this.draggedShip=null,this.displayBoardPlayer()}}displayBoardPlayer(){const r=this.player.gameBoard.board,e=document.querySelector(".board.player");e.innerHTML="";for(let n=0;n<r.length;n++)for(let t=0;t<r[n].length;t++){const a=document.createElement("div");a.classList.add("cell"),a.dataset.x=n,a.dataset.y=t,a.addEventListener("dragenter",this.dragEnterHandler),a.addEventListener("dragover",this.dragOverHandler),a.addEventListener("drop",this.dropHandler),r[n][t].hit&&a.classList.add("hit"),r[n][t].ship?(a.classList.add("ship"),r[n][t].ship.isSunk&&a.classList.add("sunk"),document.body.classList.contains("starting-screen")&&(a.classList.add("movable"),a.draggable=!0,a.addEventListener("dragstart",this.dragStartHandler),a.addEventListener("dragend",this.dragEndHandler))):a.classList.add("water"),e.appendChild(a)}}displayBoardComputer(){const r=this.computer.gameBoard.board,e=document.querySelector(".board.computer");e.innerHTML="";for(let n=0;n<r.length;n++)for(let t=0;t<r[n].length;t++){const a=document.createElement("div");a.classList.add("cell"),a.dataset.x=n,a.dataset.y=t,a.addEventListener("click",this.cellClickHandler),r[n][t].hit&&(a.classList.add("hit"),r[n][t].ship?(a.classList.add("ship"),r[n][t].ship.isSunk&&a.classList.add("sunk")):a.classList.add("water")),e.appendChild(a)}}displayBoardComputerEmpty(){const r=this.computer.gameBoard.board,e=document.querySelector(".board.computer");e.innerHTML="";for(let n=0;n<r.length;n++)for(let t=0;t<r[n].length;t++){const r=document.createElement("div");r.classList.add("cell"),r.classList.add("unclickable"),e.appendChild(r)}}async cellClickHandler(r){const e=r.target.dataset.x,n=r.target.dataset.y,t=this.computer.gameBoard.board;if(t[e][n].hit)return;if(this.computer.gameBoard.receiveAttack(e,n),this.displayBoardComputer(),this.computer.gameBoard.allShipsSunk())return void this.finalizeGame("Player");if(t[e][n].ship)return;const a=r=>new Promise((e=>setTimeout(e,r))),o=this.player.gameBoard.board;let i,s;do{if(i=[Math.floor(10*Math.random()),Math.floor(10*Math.random())],s=!1,o[i[0]][i[1]].hit)s=!0;else if(await a(300),this.player.gameBoard.receiveAttack(...i),this.displayBoardPlayer(),this.player.gameBoard.allShipsSunk()){this.finalizeGame("Computer");break}}while(o[i[0]][i[1]].ship||s)}finalizeGame(r){document.querySelectorAll(".cell").forEach((r=>{r.removeEventListener("click",this.cellClickHandler)}));const e=document.createElement("div");e.classList.add("restart-game-container");const n=document.createElement("h2");n.textContent=`${r} won!`;const t=document.createElement("button");t.textContent="Play Again",t.addEventListener("click",(()=>{this.player.gameBoard=new y,this.computer.gameBoard=new y,this.player.gameBoard.placeShipRandomly(),this.computer.gameBoard.placeShipRandomly(),this.displayBoardPlayer(),this.startingScreen(),e.remove()})),e.append(n,t),document.body.appendChild(e)}startingScreen(){document.body.classList.add("starting-screen"),this.player.gameBoard.placeShipRandomly(),this.computer.gameBoard.placeShipRandomly(),this.displayBoardPlayer(),this.displayBoardComputerEmpty();const r=document.createElement("div");r.classList.add("start-game-container");const e=document.createElement("button");e.classList.add("randomize-ships"),e.textContent="Randomize Ships",e.addEventListener("click",(()=>{this.player.gameBoard.placeShipRandomly(),this.displayBoardPlayer()}));const n=document.createElement("button");n.classList.add("start"),n.textContent="Start",n.addEventListener("click",(()=>{document.body.classList.remove("starting-screen"),this.displayBoardPlayer(),this.displayBoardComputer(),r.remove()}));const t=document.querySelector(".computer-container");r.append(e,n),t.appendChild(r)}}(new B("player"),new B("computer")).startingScreen()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,